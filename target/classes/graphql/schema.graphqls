type Query{
    getUserDetail(id: String): UserVoResponse

    getNonce(address: String): StringResponse
}

type Mutation{
    loginWithTg(req: LoginWithTgReq!) : LoginResultResponse

    bindTwitterUserInfo(req: BindTwitterUserInfoRequest!): BooleanResponse

    bindEthAddress(req: BindEthAddressRequest!): BooleanResponse


}

type StringResponse{
    success: Boolean
    traceId: String
    data: String
}

type BooleanResponse{
    success: Boolean
    traceId: String
    data: Boolean
}

type UserVoResponse{
    success: Boolean
    traceId: String
    data: UserVo
}

type UserVo {
    # user id
    id: String
    # user name
    name: String
    # user status
    status: String
}

type LoginResultResponse{
    success: Boolean
    traceId: String
    data: LoginResult
}
type LoginResult{
    userId: String
    token:String
}

input LoginWithTgReq {
    # style id
    tgId: String!
    # is public
    tgUserInfoStr: String
}

input BindTwitterUserInfoRequest {
    # style id
    code: String!
    # is public
    status: String
}

input BindEthAddressRequest {
    # style id
    ethAddress: String!

    signature: String!
}